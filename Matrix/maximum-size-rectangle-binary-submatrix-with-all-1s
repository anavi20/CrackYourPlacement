// Time Complexity: O(nm) Space Complexity O(m)
class Solution{
  public:
    int maxHeightUpto(vector<int>& height, int m){
        vector<int> leftNearest(m);
        vector<int> rightNearest(m);
        stack<int> st;
        int area = INT_MIN;
        st.push(-1);
        for(int i=0; i<m; i++){
            int id = st.top();
            while(id != -1 && height[id] >= height[i]){
                st.pop();
                id = st.top();
            }
            st.push(i);
            leftNearest[i] = id;
        }
        
        while(!st.empty()){
            st.pop();
        }
        
        st.push(m);
        for(int i=m-1; i>=0; i--){
            int id = st.top();
            while(id != m && height[id] >= height[i]){
                st.pop();
                id = st.top();
            }
            st.push(i);
            rightNearest[i] = id;
            
        }
        for(int i=0; i<m; i++){
            int calArea =  height[i] * (rightNearest[i] - leftNearest[i] - 1);
            area = max(area, calArea);
        }
        return area;
        
    }
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        vector<int> currentHeight(m,0);
        int maxiArea = INT_MIN;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(M[i][j] == 1){
                    currentHeight[j] += 1;
                }else{
                    currentHeight[j] = 0;
                }
            }
            int calcArea = maxHeightUpto(currentHeight,m);
            maxiArea = max(maxiArea,calcArea);
        }
        return maxiArea;
      
    }
};
