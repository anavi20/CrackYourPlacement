// Time Complexity: O(n) Space Complexity: O(n)
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> leftNearest(n);
        vector<int> rightNearest(n);
        stack<int> st;

        // To find left most smaller value
        st.push(-1);
        for(int i=0; i<n; i++){

            int id  = st.top();
            while(id != -1 && heights[id] >= heights[i]){
                st.pop();
                id = st.top();
            }

            st.push(i);
            leftNearest[i] = id;
        }

        while(!st.empty()){
            st.pop();
        }

        st.push(n);
        for(int i=n-1; i>=0; i--){
            int id = st.top();
            while(id != n && heights[id] >= heights[i]){
                st.pop();
                id = st.top();
            }

            st.push(i);
            rightNearest[i] = id;
        }

        int maxArea = INT_MIN;
        for(int i=0; i<n; i++){
            int area = heights[i] * (rightNearest[i] - leftNearest[i] - 1);
            maxArea = max(maxArea, area);
        }

        return maxArea;
    }
};
